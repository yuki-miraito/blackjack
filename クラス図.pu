@startuml
' left to right direction
title BlackJackクラス図

package Presentation {
  class BlackJackResult {
  }
  note top of BlackJackResult
    一回実行するたびに勝敗が返却されるので、
    回数はPresentationで制御する
  endnote
}

package Application {
  class BlackJackSimulator {
    + simulate(): Result
  }
  note left of BlackJackSimulator
    simulateメソッドでBlackJackを開始し、
    最後にResultクラスを返す
  endnote

  class BlackJack {
    + dealer: Dealer
    + players: Array<Player>
    ---
    + startGame(): Result
  }
  note left of BlackJack::startGame
    1. ディーラーの準備
      PrepareDealer.prepare()
      準備の中でディーラーがカードをシャッフルする
    2. プレイヤーの準備
      PreparePlayer.prepare()
    3. ディーラーがカードを配る
      HandOutCards.handOutCards(dealer, players)
    4. Playerのアクション
      PlayersAction.action(dealer, players)
    5. 手札の比較
      Compare.compare(players)
  endnote

  note as memo #FFE5E5
    ディーラーやプレイヤー、ハンドやデッキは
    1回のゲーム内で一意である必要がありそう。

    シングルトンとかにした方がいいのか？
  endnote
  memo .. BlackJack

  rectangle BlackJackUseCase {
    class PrepareDealer {
      + prepare(): Dealer
    }

    class PreparePlayer {
      + prepare(): Player
    }

    note as factory
      Factory用意した方がいいのか？
    endnote

    PrepareDealer .. factory
    PreparePlayer .. factory

    class HandOutCards {
      + handOutCards(Dealer dealer, Array<Player> players)
    }

    note bottom of HandOutCards
      ゲーム開始時は手札を2枚配る
      最初のプレイヤーには A を配る

      handOutCards(Dealer dealer, Array<Player> players) {
        players for player {
          if 最初だったら
            player.hand.addCard(dealer.distributeOneCard(aceFlag))
            player.hand.addCard(dealer.distributeOneCard())
          else
            player.hand.addCard(dealer.distributeOneCard())
            player.hand.addCard(dealer.distributeOneCard())
          end
        }
      }
    endnote

    class PlayersAction {
      + action(Dealer dealer, Array<Player> players)
    }
    note bottom of PlayersAction
      自分の手札の条件によって
      hit もしくは stayを行う。

      全プレイヤーがstay
      となったら終了
    endnote

    class Compare {
      + compare(Array<Player> players)
    }
    note bottom of Compare
      手札のtotalNumberを比較し、
      Resultを返却する
    endnote
  }
}

package Domain {
  package Entity {
    class Player #CBFDFF {
      + {static} hand: Hand
      --
      + hit(): Card
      + stand(): Boolean
    }

    class Dealer #CBFDFF {
      + {static} deck: Deck
      --
      + shuffle(): void
      + distributeOneCard(aceFlag): Card
    }
    note right of Dealer::distributeOneCard
      引数があればAを返す
    endnote
  }

  package ValueObject {
    class Deck #CBFDFF {
      + {static} cards: Array<Card>
      ---
      + shuffle(): void
      - create(): void
    }
    note right of Deck::create
      コンストラクタで実行し、デッキに必要なCardを
      cardsプロパティにCardを追加する
    endnote

    class Hand #CBFDFF {
      + {static} cards: Array<Card>
      ---
      + addCard(): void
      + totalNumber(): Integer
    }
    note right of Hand::totalNumber
      手札の合計numberを返す
    endnote

    class Card #CBFDFF {
      number
      suit
    }
    note right of Card
      numberは52まで
      suitはSpade, Heart, Diamond, Clubがある

      Jokerは入れてない
    endnote

    class Result #CBFDFF {
    + isWin(): boolean
    + isLoose(): boolean
    + isDrow(): boolean
  }
  }
}


BlackJackResult -- BlackJackSimulator
BlackJackSimulator -- BlackJack

BlackJack -- PrepareDealer
BlackJack -- PreparePlayer
BlackJack -- HandOutCards
BlackJack -- PlayersAction
BlackJack - Compare

Compare -right- Result

' PrepareDealer -- Player
' PrepareDealer -- Dealer
' PreparePlayer -- Player
' PreparePlayer -- Dealer
' HandOutCards -- Player
' HandOutCards -- Dealer
' PlayersAction -- Player
' PlayersAction -- Dealer
' CompareUseCase -- Player
' CompareUseCase -- Dealer

Player -- Hand
Dealer -- Deck
Hand -- Card
Deck -- Card

@enduml
