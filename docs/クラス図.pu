@startuml
' left to right direction
title BlackJackクラス図

package Presentation {
  class BlackJackResult {
  }
  note top of BlackJackResult
    一回実行するたびに勝敗が返却されるので、
    回数はPresentationで制御する
  endnote
}

package Application {
  class BlackJackSimulator {
    + simulate(): Result
  }
  note left of BlackJackSimulator
    simulateメソッドでBlackJackを開始し、
    最後にResultクラスを返す
  endnote

  class BlackJack {
    + dealer: Dealer
    + players: Array<Player>
    ---
    + startGame(): Result
  }
  note left of BlackJack::startGame
    1. ディーラーの準備
      dealer = Dealer()
    2. デッキのシャッフル
      dealer.deckCreate()
      dealer.shuffle()
    3. プレイヤーの準備
      player = Player()
    4. ディーラーがカードを配る
      player.addCard(dealer.distributeOneCard(DistributionRules))
    5. Playerのアクション
      if player.totalNumber => 16
        player.stay()
      elseif players.totalNumber < 16
        player.hit()
      end
    6. 手札を比較しResultを返す
      compare(players)
  endnote
}

package Domain {
  package Dealer {
    class Dealer #CBFDFF {
      + deck: Deck
      --
      + createDeck(): void
      + shuffle(): void
      + distributeOneCard(DistributionRules): Card
    }
    note right of Dealer::distributeOneCard
      ルールがなければランダムに配布する
      ルールがあればそのルールに従い
      カードを配布する
    endnote

    class Deck #CBFDFF {
      + cards: Array<Card>
      ---
      + shuffle(): void
      - create(): void
    }
    note right of Deck::create
      コンストラクタで実行し、デッキに必要なCardを
      cardsプロパティにCardを追加する
    endnote

    class Card #CBFDFF {
      number
      suit
    }
    note right of Card
      numberは52まで
      suitはSpade, Heart, Diamond, Clubがある

      Jokerは入れてない
    endnote

    package SimulatorRules {
      interface DistributionRules {
        distribute(Deck): Card
      }

      class DistributeAce {
        distribute(Deck): Card
      }
    }
  }

  package Player {
    class Player #CBFDFF {
      + {static} hand: Hand
      + actionStatus: Boolean
      --
      + hit(): Card
      + stay(): void
    }

    class Hand #CBFDFF {
      + {static} cards: Array<Card>
      ---
      + addCard(): void
      + totalNumber(): Integer
    }
    note right of Hand::totalNumber
      手札の合計numberを返す
      Aは1もしくは11として扱う
    endnote

    class HandCards #CBFDFF {
    }
    note right of HandCards
      CardのIDを持っている
    endnote
  }

  class Result #CBFDFF {
    + isWin(): boolean
    + isLoose(): boolean
    + isDrow(): boolean
  }
}


BlackJackResult -- BlackJackSimulator

BlackJackSimulator -- BlackJack
BlackJack -- Player
BlackJack -- Dealer
BlackJack -- Result

DistributionRules <|.. DistributeAce
Dealer::distributeOneCard -- DistributionRules

Player -- Hand
Hand -- HandCards
Dealer -- Deck
Deck -- Card

@enduml
